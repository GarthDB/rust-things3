name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for coverage reports
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Run coverage analysis
      run: |
        echo "Starting coverage analysis..."
        
        # Generate LCOV report
        echo "Generating LCOV report..."
        cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
        echo "LCOV report generated: $(ls -la lcov.info)"
        
        # Generate HTML report
        echo "Generating HTML report..."
        cargo llvm-cov --workspace --all-features --html --output-dir target/llvm-cov/html
        echo "HTML report generated in target/llvm-cov/html/"
        
        # Generate JSON report
        echo "Generating JSON report..."
        cargo llvm-cov --workspace --all-features --json --output-path coverage.json
        echo "JSON report generated: $(ls -la coverage.json)"
        
        # Generate Cobertura report
        echo "Generating Cobertura report..."
        cargo llvm-cov --workspace --all-features --cobertura --output-path cobertura.xml
        echo "Cobertura report generated: $(ls -la cobertura.xml)"
        
        # Generate text report
        echo "Generating text report..."
        cargo llvm-cov --workspace --all-features --text --output-path coverage.txt
        echo "Text report generated: $(ls -la coverage.txt)"
        
        echo "Coverage analysis completed successfully!"
    
    - name: Verify coverage artifacts
      run: |
        echo "Verifying coverage artifacts..."
        ls -la lcov.info coverage.json cobertura.xml coverage.txt
        if [ -d "target/llvm-cov/html" ]; then
          ls -la target/llvm-cov/html/
        else
          echo "HTML directory not found, checking for HTML files..."
          find . -name "*.html" -type f | head -5
        fi
        echo "All coverage artifacts verified!"
    
    - name: Upload coverage to Codecov (LCOV)
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    - name: Upload coverage to Codecov (Cobertura)
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: cobertura.xml
        flags: unittests
        name: codecov-cobertura
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          lcov.info
          coverage.json
          cobertura.xml
          coverage.txt
          target/llvm-cov/html/
        retention-days: 30
    
    - name: Display coverage summary
      run: |
        echo "## üìä Coverage Summary"
        echo ""
        if [ -f "coverage.txt" ]; then
          echo "```"
          grep -E "(TOTAL|Summary|Coverage)" coverage.txt || echo "Coverage analysis completed"
          echo "```"
          echo ""
          echo "üìÅ [View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        else
          echo "Coverage analysis completed - check the Actions tab for detailed results"
        fi

  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: coverage
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Display coverage summary
      run: |
        echo "## üìä Coverage Report Summary"
        echo
        if [ -f "coverage/coverage.txt" ]; then
          echo "### Text Report"
          cat coverage/coverage.txt
          echo
        fi
        
        if [ -f "coverage/lcov.info" ]; then
          echo "### LCOV Report"
          echo "LCOV file generated: $(wc -l < coverage/lcov.info) lines"
          echo
        fi
        
        if [ -f "coverage/coverage.json" ]; then
          echo "### JSON Report"
          echo "JSON file generated: $(wc -c < coverage/coverage.json) bytes"
          echo
        fi
        
        echo "### Artifacts"
        echo "- HTML Report: Available in coverage artifacts"
        echo "- LCOV File: Available for Codecov integration"
        echo "- JSON File: Available for custom processing"
        echo "- Cobertura File: Available for CI integration"
