name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Lint and format check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Run tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run tests
      run: cargo test --workspace --all-features
    
    - name: Run integration tests
      run: cargo test --workspace --all-features --test '*'

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for coverage reports
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Run coverage analysis
      run: |
        # Debug information
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        echo "cargo-llvm-cov version: $(cargo llvm-cov --version)"
        echo "LLVM tools available:"
        rustup component list --installed | grep llvm || echo "No LLVM tools found"
        
        # Clean previous coverage data
        cargo llvm-cov clean
        
        # Generate LCOV report
        echo "Generating LCOV report..."
        cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
        
        # Generate HTML report
        echo "Generating HTML report..."
        cargo llvm-cov --workspace --all-features --html --output-dir target/llvm-cov/html
        
        # Generate JSON report
        echo "Generating JSON report..."
        cargo llvm-cov --workspace --all-features --json --output-path coverage.json
        
        # Generate Cobertura report
        echo "Generating Cobertura report..."
        cargo llvm-cov --workspace --all-features --cobertura --output-path cobertura.xml
        
        # Generate text report
        echo "Generating text report..."
        cargo llvm-cov --workspace --all-features --text --output-path coverage.txt
        
        echo "Coverage analysis completed successfully!"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          lcov.info
          coverage.json
          cobertura.xml
          coverage.txt
          target/llvm-cov/html/
        retention-days: 30
    
    - name: Display coverage summary
      run: |
        echo "## üìä Coverage Analysis"
        echo ""
        if [ -f "coverage.txt" ]; then
          echo "```"
          grep -E "(TOTAL|Summary|Coverage|Lines:|Functions:|Regions:)" coverage.txt || echo "Coverage analysis completed"
          echo "```"
          echo ""
          echo "üìÅ [View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        else
          echo "Coverage analysis completed - check the Actions tab for detailed results"
        fi

  # Build and package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build workspace
      run: cargo build --workspace --all-features --release
    
    - name: Build CLI binary
      run: cargo build --package things3-cli --release
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/release/things3
          target/release/libthings_core.*
          target/release/libthings_common.*
        retention-days: 7

  # Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security, coverage, build]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Display CI summary
      run: |
        echo "## üöÄ CI/CD Pipeline Summary"
        echo
        echo "### ‚úÖ Completed Jobs:"
        echo "- Lint and Format: ${{ needs.lint.result }}"
        echo "- Test Suite: ${{ needs.test.result }}"
        echo "- Security Audit: ${{ needs.security.result }}"
        echo "- Code Coverage: ${{ needs.coverage.result }}"
        echo "- Build and Package: ${{ needs.build.result }}"
        echo
        
        if [ -f "coverage/coverage.txt" ]; then
          echo "### üìä Coverage Summary:"
          cat coverage/coverage.txt
          echo
        fi
        
        echo "### üìÅ Artifacts:"
        echo "- Coverage Reports: Available in artifacts"
        echo "- Build Artifacts: Available in artifacts"
        echo "- HTML Coverage: Available in coverage artifacts"