name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Lint and format check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      # Ignore RUSTSEC-2023-0071 (RSA timing sidechannel vulnerability) as it's a transitive
      # dependency through SQLx MySQL support with no fix available and we don't directly use MySQL
      # Ignore RUSTSEC-2024-0363 (Binary Protocol Misinterpretation in sqlx) as it's a transitive
      # dependency and we don't directly use the affected MySQL binary protocol features
      run: cargo audit --ignore RUSTSEC-2023-0071 --ignore RUSTSEC-2024-0363

  # Combined test and coverage job - runs tests once and generates coverage
  test-and-coverage:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for coverage reports
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Set up LLVM tools environment
      run: |
        echo "Setting up LLVM tools environment..."
        RUST_SYSROOT=$(rustc --print sysroot)
        TARGET=$(rustc -vV | grep host | cut -d' ' -f2)
        LLVM_COV_PATH="$RUST_SYSROOT/lib/rustlib/$TARGET/bin/llvm-cov"
        LLVM_PROFDATA_PATH="$RUST_SYSROOT/lib/rustlib/$TARGET/bin/llvm-profdata"
        
        echo "LLVM_COV=$LLVM_COV_PATH" >> $GITHUB_ENV
        echo "LLVM_PROFDATA=$LLVM_PROFDATA_PATH" >> $GITHUB_ENV
        
        # Verify the tools exist
        if [ -f "$LLVM_COV_PATH" ]; then
          echo "‚úÖ llvm-cov found at $LLVM_COV_PATH"
        else
          echo "‚ùå llvm-cov not found, searching..."
          find "$RUST_SYSROOT" -name "llvm-cov" -type f 2>/dev/null || echo "No llvm-cov found"
        fi
    
    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage analysis..."
        
        # Clean previous coverage data
        cargo llvm-cov clean
        
        # Run tests and generate coverage in one step
        echo "Running workspace tests with coverage..."
        cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
        
        # Generate additional report formats
        echo "Generating HTML report..."
        cargo llvm-cov --workspace --all-features --html --output-dir target/llvm-cov/html --no-run
        
        echo "Generating JSON report..."
        cargo llvm-cov --workspace --all-features --json --output-path coverage.json --no-run
        
        echo "Generating Cobertura report..."
        cargo llvm-cov --workspace --all-features --cobertura --output-path cobertura.xml --no-run
        
        echo "Generating text report..."
        cargo llvm-cov --workspace --all-features --text --output-path coverage.txt --no-run
        
        echo "Coverage analysis completed!"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          lcov.info
          coverage.json
          cobertura.xml
          coverage.txt
          target/llvm-cov/html/
        retention-days: 30
    
    - name: Display coverage summary
      run: |
        echo "## üìä Coverage Summary"
        echo ""
        if [ -f "coverage.txt" ]; then
          echo "```"
          cat coverage.txt
          echo "```"
          echo ""
          echo "üìÅ [View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        else
          echo "Coverage analysis completed - check the Actions tab for detailed results"
        fi

  # Build and package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test-and-coverage, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build workspace
      run: cargo build --workspace --all-features --release
    
    - name: Build CLI binary
      run: cargo build --package things3-cli --release
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/release/things3
          target/release/libthings_core.*
          target/release/libthings_common.*
        retention-days: 7

  # Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test-and-coverage, security, build]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
      continue-on-error: true
    
    - name: Display CI summary
      run: |
        echo "## üöÄ CI/CD Pipeline Summary"
        echo
        echo "### ‚úÖ Job Results:"
        echo "- Lint and Format: ${{ needs.lint.result }}"
        echo "- Test and Coverage: ${{ needs.test-and-coverage.result }}"
        echo "- Security Audit: ${{ needs.security.result }}"
        echo "- Build and Package: ${{ needs.build.result }}"
        echo
        
        if [ -f "coverage/coverage.txt" ]; then
          echo "### üìä Coverage Summary:"
          echo "```"
          cat coverage/coverage.txt
          echo "```"
          echo
        fi
        
        echo "### üìÅ Artifacts:"
        echo "- Coverage Reports: Available in artifacts"
        echo "- Build Artifacts: Available in artifacts"
        echo "- HTML Coverage: Available in coverage artifacts"
